const utils = require('@/utils')

/**
 * 
 * @typedef {import('@/server').Middleware} Middleware
 */

/**
 * 
 * @type {function(): Middleware}
 */
module.exports.request_id = () => (ctx, next) => {
  ctx.res.setHeader('X-Req-ID', utils.uuid())

  return next()
}

/**
 * @type {function(string=): Middleware}
 */
module.exports.log_request = (log_level = 'trace') => (ctx, next) => {
  utils.invariant(
    log_level in ctx.log,
    `Must give log_request a log_level that is a known log level, given ${log_level} instead`
  )

  ctx.log[log_level]({ req: ctx.req, res: ctx.res })

  return next()
}

/**
 * @type {function(): Middleware}
 */
module.exports.catch_errors = () => async (ctx, next) => {
  try {
    await next()
  } catch (e) {
    console.dir(e)
    const status = e.code > 99 && e.code < 600 ? e.code : 500
    const message = e.message

    ctx.status = status
    ctx.body = {
      error: {
        message
      }
    }
  }
}

/**
 * @type {function(string=): Middleware}
 */
module.exports.log_errors = (log_level = 'error') => async (ctx, next) => {
  utils.invariant(
    log_level in ctx.log,
    `Must give log_request a log_level that is a known log level, given ${log_level} instead`
  )

  try {
    await next()
  } catch (e) {
    ctx.log[log_level]({ req: ctx.res, res: ctx.res, err: e })
    throw e
  }
}