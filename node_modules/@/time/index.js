const utils = require('@/utils')


/**
 * Given a Config Value, we reduce its
 * dependencies inside of the Config
 * 
 * @param {* | Array<string, *>} value 
 * @param {*} config 
 * @returns {Array<*>}
 */

const reduce_dep_list = (value, config) =>  {
    if (Array.isArray(value)) {
        return ([
            value[1],
            ...reduce_dep_list(config[value[0]], config)
        ])
    } else {
        return [value]
    }
}

class Transformer {
    constructor(config, ap) {
        this._config = config
        this._apply = ap
    }

    from(key) {
        this._from = key

        return this
    }

    to(key) {
        this._to = key

        return this
    }

    transform(intialValue){
        const { _from, _to } = this

        utils.invariant(
            _from in this._config,
            `You are trying to transform from something you have not told me about: ${_from}`
        )

        const from_config = this._config[_from]
        
        utils.invariant(
            _to in from_config.largerThan || 
            _to in from_config.smallerThan,
            `You are trying to transform from: ${_from} to: ${_to} but did not tell me how to in the configuratio`
        )

        const is_larger = _to in from_config.largerThan
        const to_config = from_config[is_larger ? 'largerThan' : 'smallerThan'][_to]

        const valuesToTransform = [intialValue]
        
        if (Array.isArray(to_config)) {
            valuesToTransform.push(
                ...reduce_dep_list(to_config, from_config[is_larger ? 'largerThan' : 'smallerThan'])
            )
        } else {
            valuesToTransform.push(to_config)
        }


        return valuesToTransform.reduce((last, current) => this._apply(last, current, is_larger))
    }
}


const relationship_config = {
    ms: {
        largerThan: {},
        smallerThan: {
            s: 1000,
            m: ['s', 60],
            hr: ['m', 60],
            d: ['hr', 24]
        }
    },
    s: {
        largerThan: {
            ms: 1000
        },
        smallerThan: {
            m: 60,
            hr: ['m', 60],
            d: ['hr', 24]
        }
    },
    m: {
      largerThan: {
        s: 60,
        ms: ['s', 1000]
      },
      smallerThan: {
        hr: 60,
        d: ['hr', 24]
      }
    },
    hr: {
      largerThan: {
        m: 60,
        s: ['m', 60],
        ms: ['s', 1000]
      },
      smallerThan: {
        d: 24
      }
    },
    d: {
      largerThan: {
        hr: 24,
        m: ['hr', 60],
        s: ['m', 60],
        ms: ['s', 1000]
      },
      smallerThan: {}
    }
  }
// How do we have to apply the relationship?
// Ex:
// (s, ms, true) => s * ms
// (ms, s, false) => ms / s
const application = (a, b, is_larger) => is_larger
// If A is larger than B, we need to multiply
// A to get what it is in B
? a * b
// If A is smaller than B, we need to divide
// A to get what is in B
: a / b;

const get_transformer = () => new Transformer(relationship_config, application)

const millisecond_times = (() => {
    const transformer = get_transformer()

    return {
        day: transformer.from('ms').to('d').transform(),
        hour: transformer.from('ms').to('hr').transform(),
        minute: transformer.from('ms').to('m').transform(),
        second: transformer.from('ms').to('s').transform()
    }
})()

module.exports.in_milli = millisecond_times

const second_times = (() => {
    const transformer = get_transformer()

    return {
        milli: transformer.from('s').to('ms').transform(),
        hour: transformer.from('s').to('hr').transform(),
        minute: transformer.from('s').to('m').transform(),
        day: transformer.from('s').to('d').transform()
    }
})()

module.exports.in_sec = second_times