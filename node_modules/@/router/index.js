const utils = require('@/utils')
const { compose } = require('@/server')

const call_handler_with_args = ([path, handler]) => (ctx, next) => {
  const args = {}
  const split_url = ctx.req.url.split('/')
  const split_path = path.split('/')

  for (let i = 0; i < split_path.length; i++) {
    const section = split_path[i]
    // is argument
    if (section.indexOf(':') === 0) {
      args[section.replace(':', '')] = split_url[i]
    }
  }

  ctx.params = args

  return handler(ctx, next)
}

/**
 * A Router is something that exposes a
 * callback function which is a Server Middleware
 *
 * The Router allows us to create RESTful handlers
 * for an API
 *
 * Example:
 *
 * const router = new Router()
 *
 * router
 *  .get('/foo', (ctx, next) => {
 *    ctx.log.trace('Called!')
 *    return next()
 *  })
 *  .get('/foo', (ctx, next) => {
 *    ctx.log.trace('I was called as well!')
 *
 *    ctx.status = 201
 *   })
 *
 * server.use(router.routes())
 */

class Router {
  constructor() {
    this._handlers = {
      get: [],
      post: [],
      patch: [],
      put: [],
      delete: []
    }
  }

  /**
   * Adds GET handler(s)
   * 
   * If given a string as first argument, all other arguments are
   * treated like middleware that is related only to that subpath.
   * 
   * If given all middleware, handles any _GET_ that this router sees
   * 
   * ## Example
   * 
   * ```js
   * router
   *   // this will get called on GET /foo, /foo?123=true,
   *   // & /foo/bar/baz/....
   *  .get('/foo', (ctx) => { ... })
   *   // this will get called on GET /foo, /bar, /baz, ...
   *  .get('/:name', (ctx, next) => {  ... }, ctx => {})
   * 
   * ```
   * 
   * @param {(string | import('@/server').Middleware)} path 
   * @param  {...import('@/server').Middleware} handlers 
   * @returns {Router}
   */
  get(path, ...handlers) {
    if (typeof path === 'function') {
      this._handlers.get.push(...[path, ...handlers].map(handler => (['*', handler])))
    } else {
      utils.invariant(
        typeof path === 'string',
        `You tried to create a route handler with a first value of type ${typeof path} instead of string or function`
      )

      this._handlers.get.push(...handlers.map(handler => ([path, handler])))

    }


    return this
  }

  route() {
    return (ctx, next) => {
      const { method, url } = ctx.req
      const handlers = this._handlers[method.toLowerCase()]

      // We have no handlers for this method
      if (!handlers.length) {
        return next()
      }

      const split_url = url.split('/')

      const matched_handlers_by_path = handlers.filter(([path]) => {
        const split_path = path.split('/')

        // The path that they requested is longer than
        // the URL so we DO NOT MATCH
        if (split_path.length > split_url.length) {
          return false
        }

        for (let i = 0; i < split_path.length; i++) {
          const part = split_path[i]
          // is an arg
          if (part.indexOf(':') === 0) {
            continue;
          } else if (part === split_url[i]) {
            // is a direct match
            continue
          } else if (new RegExp(part).test(split_url[i])) {
            continue
          } else {
            return false
          }
        }


        // if we got here, we matched enough
        return true
      })

      const handler = compose(matched_handlers_by_path.map(call_handler_with_args))

      return handler(ctx, next)
    }
  }
}

module.exports = Router